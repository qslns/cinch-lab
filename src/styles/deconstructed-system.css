/* ==========================================================================
   CINCH LAB - Deconstructed Design System
   Margiela Philosophy: Revealing the hidden, exposing the process
   Sacai Philosophy: Hybrid layering, unexpected combinations
   ========================================================================== */

/* ==========================================================================
   1. TEXTURE & MATERIAL SYSTEM
   ========================================================================== */

:root {
  /* Material Textures - Real Fashion Materials */
  --texture-raw-canvas: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='turbulence' baseFrequency='0.9' numOctaves='4' /%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.02'/%3E%3C/svg%3E");
  --texture-linen: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40'%3E%3Cpath d='M0 0h20v20H0zM20 20h20v20H20z' fill='%23000' fill-opacity='0.01'/%3E%3C/svg%3E");
  --texture-mesh: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20'%3E%3Ccircle cx='10' cy='10' r='1' fill='%23000' fill-opacity='0.03'/%3E%3C/svg%3E");

  /* Deconstructed Colors - Raw & Unfinished */
  --raw-white: #FDFCF8;
  --unbleached: #F7F3ED;
  --raw-cotton: #EDE8DF;
  --canvas: #E3DDD2;
  --muslin: #D8D0C3;

  /* Thread Colors - Stitching Details */
  --thread-white: #FFFFFF;
  --thread-red: #DC143C;
  --thread-black: #0A0A0A;
  --thread-blue: #002F6C;

  /* Hybrid Accent System */
  --hybrid-orange-pink: linear-gradient(135deg, #FF6B35 0%, #F7931E 50%, #FFB6C1 100%);
  --hybrid-blue-green: linear-gradient(135deg, #0066CC 0%, #00A896 50%, #02C39A 100%);
  --hybrid-purple-red: linear-gradient(135deg, #6B46C1 0%, #B24592 50%, #F15F79 100%);
  --hybrid-yellow-lime: linear-gradient(135deg, #FFD700 0%, #ADFF2F 50%, #7FFF00 100%);

  /* Shadow System - Layered & Deep */
  --shadow-lifted: 0 10px 30px -5px rgba(0,0,0,0.15);
  --shadow-floating: 0 20px 60px -10px rgba(0,0,0,0.25);
  --shadow-hovering: 0 30px 90px -15px rgba(0,0,0,0.35);
  --shadow-inset-soft: inset 0 2px 4px rgba(0,0,0,0.06);
  --shadow-inset-deep: inset 0 4px 8px rgba(0,0,0,0.12);

  /* Timing Functions - Natural Movement */
  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
  --ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
  --ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  --ease-spring: cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* ==========================================================================
   2. DECONSTRUCTED TYPOGRAPHY
   ========================================================================== */

@font-face {
  font-family: 'Editorial';
  src: url('/fonts/editorial.woff2') format('woff2');
  font-weight: 100 900;
  font-style: normal;
  font-display: swap;
}

/* Deconstructed Text Styles */
.text-deconstructed {
  position: relative;
  display: inline-block;
}

.text-deconstructed::before,
.text-deconstructed::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.text-deconstructed::before {
  color: var(--thread-red);
  animation: deconstruct-1 8s infinite;
  clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
}

.text-deconstructed::after {
  color: var(--thread-blue);
  animation: deconstruct-2 8s infinite;
  clip-path: polygon(0 55%, 100% 55%, 100% 100%, 0 100%);
}

@keyframes deconstruct-1 {
  0%, 100% { transform: translate(0); }
  20% { transform: translate(-2px, -1px) rotate(-0.5deg); }
  40% { transform: translate(1px, 1px) rotate(0.5deg); }
  60% { transform: translate(-1px, 2px) rotate(-0.5deg); }
  80% { transform: translate(2px, -2px) rotate(0.5deg); }
}

@keyframes deconstruct-2 {
  0%, 100% { transform: translate(0); }
  20% { transform: translate(2px, 1px) rotate(0.5deg); }
  40% { transform: translate(-1px, -1px) rotate(-0.5deg); }
  60% { transform: translate(1px, -2px) rotate(0.5deg); }
  80% { transform: translate(-2px, 2px) rotate(-0.5deg); }
}

/* ==========================================================================
   3. EXPOSED SEAM SYSTEM
   ========================================================================== */

.exposed-seam {
  position: relative;
  overflow: visible;
}

.exposed-seam::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background-image: repeating-linear-gradient(
    45deg,
    var(--thread-red),
    var(--thread-red) 1px,
    transparent 1px,
    transparent 4px
  );
  opacity: 0.3;
  pointer-events: none;
}

.exposed-seam::after {
  content: '';
  position: absolute;
  top: -4px;
  left: -4px;
  right: -4px;
  bottom: -4px;
  border: 1px dashed var(--thread-black);
  opacity: 0.2;
  pointer-events: none;
}

/* Stitching Pattern */
.stitching {
  position: relative;
}

.stitching::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  height: 1px;
  background-image: repeating-linear-gradient(
    90deg,
    var(--thread-white) 0,
    var(--thread-white) 5px,
    transparent 5px,
    transparent 10px
  );
  transform: translateY(-50%);
}

/* ==========================================================================
   4. LAYERED CARD SYSTEM (SACAI INSPIRED)
   ========================================================================== */

.layer-card {
  position: relative;
  transform-style: preserve-3d;
  transition: transform 0.6s var(--ease-out-expo);
}

.layer-card:hover {
  transform: rotateY(5deg) rotateX(-5deg);
}

.layer-card::before,
.layer-card::after {
  content: '';
  position: absolute;
  inset: 0;
  background: inherit;
  border: inherit;
  border-radius: inherit;
  transition: transform 0.6s var(--ease-out-expo);
}

.layer-card::before {
  transform: translate3d(-8px, -8px, -20px);
  opacity: 0.6;
  filter: blur(0.5px);
}

.layer-card::after {
  transform: translate3d(8px, 8px, -40px);
  opacity: 0.4;
  filter: blur(1px);
}

.layer-card:hover::before {
  transform: translate3d(-16px, -16px, -40px);
}

.layer-card:hover::after {
  transform: translate3d(16px, 16px, -80px);
}

/* ==========================================================================
   5. HYBRID SPLIT COMPONENTS
   ========================================================================== */

.hybrid-split {
  position: relative;
  overflow: hidden;
  display: grid;
  grid-template-columns: 1fr 1fr;
}

.hybrid-split::after {
  content: '';
  position: absolute;
  top: 0;
  left: 50%;
  width: 20px;
  height: 100%;
  transform: translateX(-50%);
  background: repeating-linear-gradient(
    0deg,
    var(--thread-black) 0,
    var(--thread-black) 2px,
    transparent 2px,
    transparent 6px
  );
  opacity: 0.2;
  pointer-events: none;
  z-index: 10;
}

.hybrid-split > * {
  transition: transform 0.4s var(--ease-out-back);
}

.hybrid-split:hover > *:first-child {
  transform: translateX(-10px) rotate(-1deg);
}

.hybrid-split:hover > *:last-child {
  transform: translateX(10px) rotate(1deg);
}

/* ==========================================================================
   6. RAW EDGE EFFECTS
   ========================================================================== */

.raw-edge {
  position: relative;
  --edge-size: 4px;
}

.raw-edge::before {
  content: '';
  position: absolute;
  inset: 0;
  background: inherit;
  mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Cpath d='M0,0 Q10,2 20,0 T40,0 T60,0 T80,0 T100,0 L100,100 Q90,98 80,100 T60,100 T40,100 T20,100 T0,100 Z' fill='black'/%3E%3C/svg%3E");
  mask-size: var(--edge-size) 100%;
  mask-repeat: repeat-x;
}

/* ==========================================================================
   7. CONSTRUCTION MARKERS
   ========================================================================== */

.construction-mark {
  position: relative;
}

.construction-mark::before {
  content: attr(data-mark);
  position: absolute;
  top: -20px;
  left: 0;
  font-family: 'Courier New', monospace;
  font-size: 10px;
  color: var(--thread-red);
  text-transform: uppercase;
  letter-spacing: 1px;
  opacity: 0.5;
}

.construction-mark::after {
  content: '';
  position: absolute;
  top: -10px;
  left: 0;
  width: 20px;
  height: 1px;
  background: var(--thread-red);
  opacity: 0.3;
}

/* Pattern Piece Overlay */
.pattern-piece {
  position: relative;
  clip-path: polygon(
    0 10%,
    30% 0,
    100% 0,
    100% 85%,
    85% 100%,
    0 100%
  );
}

.pattern-piece::before {
  content: '';
  position: absolute;
  inset: 0;
  background: repeating-linear-gradient(
    90deg,
    transparent 0,
    transparent 19px,
    var(--thread-black) 19px,
    var(--thread-black) 20px
  ),
  repeating-linear-gradient(
    0deg,
    transparent 0,
    transparent 19px,
    var(--thread-black) 19px,
    var(--thread-black) 20px
  );
  opacity: 0.05;
}

/* ==========================================================================
   8. INTERACTIVE FABRIC EFFECTS
   ========================================================================== */

.fabric-interactive {
  position: relative;
  overflow: hidden;
  cursor: grab;
  transition: transform 0.3s var(--ease-out-expo);
}

.fabric-interactive:active {
  cursor: grabbing;
  transform: scale(0.98);
}

.fabric-interactive::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(
    circle at center,
    transparent 0%,
    rgba(255, 255, 255, 0.1) 40%,
    transparent 70%
  );
  transform: translate(-50%, -50%) scale(0);
  transition: transform 0.6s var(--ease-out-expo);
  pointer-events: none;
}

.fabric-interactive:hover::before {
  transform: translate(-50%, -50%) scale(1);
}

/* Wrinkle Effect on Hover */
.wrinkle-hover {
  position: relative;
  transition: filter 0.3s ease;
}

.wrinkle-hover:hover {
  filter: url('#wrinkle');
}

/* ==========================================================================
   9. ASYMMETRIC GRID SYSTEM
   ========================================================================== */

.grid-asymmetric {
  display: grid;
  grid-template-columns: 2fr 3fr 1fr 2.5fr 1.5fr;
  grid-auto-rows: minmax(100px, auto);
  gap: 2px;
  transform: rotate(-0.5deg);
}

.grid-asymmetric > * {
  transform: rotate(0.5deg);
}

.grid-asymmetric > *:nth-child(3n) {
  grid-column: span 2;
  transform: rotate(-1deg) translateY(-5px);
}

.grid-asymmetric > *:nth-child(5n) {
  grid-row: span 2;
  transform: rotate(1deg) translateX(-5px);
}

.grid-asymmetric > *:nth-child(7n) {
  grid-column: span 3;
  grid-row: span 2;
  transform: rotate(-0.5deg) translate(5px, -5px);
}

/* ==========================================================================
   10. EXPERIMENTAL CURSORS
   ========================================================================== */

.cursor-thread {
  cursor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32'%3E%3Cpath d='M16,0 L16,32 M0,16 L32,16' stroke='black' stroke-width='1'/%3E%3Cpath d='M8,8 L24,24 M24,8 L8,24' stroke='red' stroke-width='0.5'/%3E%3C/svg%3E") 16 16, crosshair;
}

.cursor-scissors {
  cursor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32'%3E%3Cpath d='M8,8 L24,24 M24,8 L8,24' stroke='black' stroke-width='2'/%3E%3Ccircle cx='8' cy='8' r='3' fill='none' stroke='black'/%3E%3Ccircle cx='24' cy='8' r='3' fill='none' stroke='black'/%3E%3C/svg%3E") 16 16, crosshair;
}

/* ==========================================================================
   11. MOTION & TRANSFORMATION
   ========================================================================== */

@keyframes unravel {
  0% { transform: scaleY(1); }
  50% { transform: scaleY(1.2) skewY(-2deg); }
  100% { transform: scaleY(1); }
}

@keyframes stitch {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-2px); }
  75% { transform: translateX(2px); }
}

@keyframes fold {
  0% { transform: perspective(1000px) rotateX(0); }
  50% { transform: perspective(1000px) rotateX(180deg); }
  100% { transform: perspective(1000px) rotateX(360deg); }
}

.animate-unravel {
  animation: unravel 4s ease-in-out infinite;
}

.animate-stitch {
  animation: stitch 0.5s linear infinite;
}

.animate-fold {
  animation: fold 6s var(--ease-in-out-quart) infinite;
}

/* ==========================================================================
   12. NOISE & TEXTURE OVERLAYS
   ========================================================================== */

.texture-overlay {
  position: relative;
}

.texture-overlay::after {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--texture-raw-canvas);
  mix-blend-mode: multiply;
  pointer-events: none;
  opacity: 0.5;
}

.texture-paper {
  background-image:
    repeating-linear-gradient(
      45deg,
      transparent,
      transparent 10px,
      rgba(0,0,0,0.01) 10px,
      rgba(0,0,0,0.01) 20px
    ),
    var(--texture-linen);
}

/* ==========================================================================
   13. BUTTON VARIATIONS
   ========================================================================== */

.btn-deconstructed {
  position: relative;
  padding: 16px 32px;
  background: transparent;
  border: none;
  overflow: visible;
  cursor: pointer;
  transition: all 0.4s var(--ease-out-back);
}

.btn-deconstructed::before {
  content: '';
  position: absolute;
  inset: 0;
  border: 1px solid var(--thread-black);
  transform: rotate(-1deg);
  transition: transform 0.4s var(--ease-out-back);
}

.btn-deconstructed::after {
  content: '';
  position: absolute;
  inset: -4px;
  border: 1px dashed var(--thread-red);
  opacity: 0;
  transform: rotate(1deg);
  transition: all 0.4s var(--ease-out-back);
}

.btn-deconstructed:hover::before {
  transform: rotate(-2deg) scale(1.05);
}

.btn-deconstructed:hover::after {
  opacity: 0.5;
  transform: rotate(2deg) scale(1.1);
}

.btn-deconstructed span {
  position: relative;
  z-index: 1;
  display: inline-block;
  transition: transform 0.4s var(--ease-out-back);
}

.btn-deconstructed:hover span {
  transform: rotate(-1deg);
}

/* Hybrid Button */
.btn-hybrid {
  position: relative;
  padding: 16px 40px;
  background: linear-gradient(90deg, var(--raw-white) 50%, var(--thread-black) 50%);
  background-size: 200% 100%;
  background-position: 0% 0%;
  border: none;
  color: var(--thread-black);
  cursor: pointer;
  overflow: hidden;
  transition: all 0.6s var(--ease-out-expo);
}

.btn-hybrid:hover {
  background-position: 100% 0%;
  color: var(--raw-white);
}

.btn-hybrid::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 100%;
  background: var(--hybrid-orange-pink);
  transform: translate(-50%, -50%) skewX(-15deg);
  transition: width 0.6s var(--ease-out-expo);
  z-index: -1;
}

.btn-hybrid:hover::before {
  width: 120%;
}